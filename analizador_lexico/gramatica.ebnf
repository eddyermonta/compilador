program ::= decl+  // Un programa consiste en una o más declaraciones

decl ::= var_decl                  // Declaración de variables
       | func_decl                 // Declaración de funciones
       | class_decl                // Declaración de clases

class_decl ::= 'class' class_name '{' class_body '}'  // Definición de una clase

class_name ::= IDENT  // Nombre de la clase

class_body ::= (var_decl | func_decl | access_specifier)* 
    // Cuerpo de la clase que puede incluir variables, funciones, y especificadores de acceso

access_specifier ::= 'public' 
                  | 'private' 
                  | 'protected'  
    // Especificador de acceso: público, privado o protegido

this_assign_stmt ::= 'this' '.' IDENT '=' IDENT ';'  
    // Asignación en el constructor usando `this` para referirse al objeto actual

var_decl ::= type_spec IDENT ';'  
           | type_spec IDENT '[' ']' ';'  
    // Declaraciones de variables con tipos básicos y arreglos

type_spec ::= 'void'           // Tipo vacío, sin valor
            | 'bool'           // Tipo booleano (true o false)
            | 'int'            // Tipo entero
            | 'float'          // Tipo de punto flotante
            | 'string'         // Tipo cadena (de caracteres)
            | IDENT             // Para tipos definidos por el usuario (clases, structs)

func_decl ::= type_spec IDENT '(' params ')' compound_stmt  
    // Declaración de funciones con tipo de retorno, nombre, parámetros, y cuerpo

params ::= param_list        // Lista de parámetros
        | 'void'             // O ausencia de parámetros

param_list ::= param (',' param)*  // Lista de parámetros separados por comas

param ::= type_spec IDENT  
       | type_spec IDENT '[' ']'  
    // Declaración de parámetros, que pueden ser tipos básicos con o sin arreglos

compound_stmt ::= '{' local_decls stmt_list '}'  
    // Declaración compuesta que contiene declaraciones locales y lista de sentencias

local_decls ::= local_decl*  // Declaraciones locales dentro de un bloque de código

local_decl ::= type_spec IDENT ';'  
            | type_spec IDENT '[' ']' ';'  
    // Declaraciones locales de variables con tipos básicos y estructuras de arreglo

stmt_list ::= stmt*  // Lista de sentencias dentro de un bloque de código

stmt ::= expr_stmt         // Sentencia de expresión
      | compound_stmt      // Sentencia compuesta
      | if_stmt            // Sentencia condicional
      | while_stmt         // Sentencia de bucle
      | return_stmt        // Sentencia de retorno
      | break_stmt         // Sentencia de interrupción del bucle

expr_stmt ::= expr? ';'  // Sentencia de expresión opcionalmente seguida de un punto y coma

if_stmt ::= 'if' '(' expr ')' stmt ('else' stmt)?  
    // Sentencia condicional if, opcionalmente seguida de una cláusula else

while_stmt ::= 'while' '(' expr ')' stmt  
    // Sentencia de bucle while

return_stmt ::= 'return' expr? ';'  
    // Sentencia de retorno que opcionalmente incluye una expresión

break_stmt ::= ('break' | 'continue') ';'  
    // Sentencia de interrupción del bucle o de continuación al siguiente ciclo

expr ::= IDENT '=' expr
    | IDENT '[' expr ']' '=' expr
    | expr 'or' expr
    | expr 'and' expr
    | expr '==' expr
    | expr '!=' expr
    | expr '+' expr
    | expr '-' expr
    | expr '*' expr
    | expr '/' expr
    | expr '%' expr
    | '(' expr ')'
    | IDENT
    | IDENT '[' expr ']'
    | IDENT '(' args ')'
    | IDENT '.' IDENT
    | BOOL_LIT
    | INT_LIT
    | FLOAT_LIT
    | 'new' type_spec '[' expr ']'
    // Expresiones que incluyen asignación, operaciones aritméticas y lógicas, llamadas a funciones, etc.

args ::= arg_list?  // Lista de argumentos para llamadas a funciones, opcionalmente vacía

arg_list ::= expr (',' expr)*  // Lista de argumentos separados por comas

IDENT ::= [a-zA-Z_][a-zA-Z0-9_]*  // Identificadores
